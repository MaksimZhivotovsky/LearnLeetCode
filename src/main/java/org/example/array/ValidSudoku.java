package org.example.array;

/*
Определите, является ли 9 x 9 поле судоку допустимым. Проверять нужно только заполненные ячейки в
соответствии со следующими правилами:

Каждая строка должна содержать цифры 1-9 без повторения.
Каждый столбец должен содержать цифры 1-9 без повторения.
Каждый из девяти 3 x 3 прямоугольников в сетке должен содержать цифры 1-9 без повторений.
Примечание:

Поле судоку (частично заполненное) может быть допустимым, но не обязательно решаемым.
Только заполненные ячейки должны быть проверены в соответствии с упомянутыми правилами.


Пример 1:


Ввод: доска =
[["5","3",".",".","7",".",".",".","."]
["6",".",".","1","9","5",".",".","."]
[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
["4",".",".","8",".","3",".",".","1"]
["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
[".", ".", ".", "4", "1", "9", ".", ".", "5"]
,[".",".",".",".","8",".",".","7","9"]]
Вывод: true
Пример 2:

Ввод: доска =
[["8","3",".",".","7",".",".",".","."]
["6",".",".","1","9","5",".",".","."]
[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
["4",".",".","8",".","3",".",".","1"]
["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
[".", ".", ".", "4", "1", "9", ".", ".", "5"]
,[".",".",".",".","8",".",".","7","9"]]
Вывод: false
Объяснение: То же, что и в примере 1, за исключением того, что 5 в верхнем левом углу изменено на 8.
Поскольку в верхнем левом поле 3x3 есть две восьмёрки, оно недействительно.
 */

public class ValidSudoku {
    public static void main(String[] args) {

        char[][] mass = {
                {'5','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };

        System.out.println(isValidSudoku(mass));
    }

    public static boolean isValidSudoku(char[][] board) {
        if (board == null || board.length != 9 || board[0].length != 9)
            return false;

        for (int i = 0; i < 9; i++) {
            boolean[] m = new boolean[9];
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    if (m[(int) (board[i][j] - '1')]) {
                        return false;
                    }
                    m[(int) (board[i][j] - '1')] = true;
                }
            }
        }

        for (int j = 0; j < 9; j++) {
            boolean[] m = new boolean[9];
            for (int i = 0; i < 9; i++) {
                if (board[i][j] != '.') {
                    if (m[(int) (board[i][j] - '1')]) {
                        return false;
                    }
                    m[(int) (board[i][j] - '1')] = true;
                }
            }
        }

        for (int block = 0; block < 9; block++) {
            boolean[] m = new boolean[9];
            for (int i = block / 3 * 3; i < block / 3 * 3 + 3; i++) {
                for (int j = block % 3 * 3; j < block % 3 * 3 + 3; j++) {
                    if (board[i][j] != '.') {
                        if (m[(int) (board[i][j] - '1')]) {
                            return false;
                        }
                        m[(int) (board[i][j] - '1')] = true;
                    }
                }
            }
        }

        return true;
    }
}
