package org.example.array;

/*
Вам предоставляется целочисленный массив, prices где prices[i] - цена данной акции на ith день.

Каждый день вы можете принять решение о покупке и/или продаже акций.
В любой момент вы можете владеть не более чем одной акцией.
Однако вы можете купить её, а затем сразу же продать в тот же день.

Найдите и верните.

Пример 1:

Входные данные: цены = [7,1,5,3,6,4]
Вывод: 7
Пояснение: Покупаем на второй день (цена = 1) и продаем на третий день (цена = 5), прибыль = 5-1 = 4.
 Затем покупаем на четвертый день (цена = 3) и продаем на пятый день (цена = 6), прибыль = 6-3 = 3.
Общая прибыль равна 4 + 3 = 7.
Пример 2:

Ввод: цены = [1,2,3,4,5]
Вывод: 4
Объяснение: покупаем в день 1 (цена = 1) и продаем в день 5 (цена = 5), прибыль = 5-1 = 4.
 Общая прибыль составляет 4.
Пример 3:

Ввод: цены = [7,6,4,3,1]
Вывод: 0
Объяснение: Невозможно получить положительную прибыль, поэтому мы никогда не покупаем акции,
 чтобы получить максимальную прибыль в 0.

 */

public class BestTimeToBuyAndSellStockII {

    public static void main(String[] args) {

//        int[] mass = {7,1,5,3,6,4};
//        int[] mass = {1,2,3,4,5};
        int[] mass = {7,6,4,3,1};
        System.out.println(maxProfit(mass));

    }
    public static int maxProfit(int[] prices) {

        int result = 0;
        int priceStock = prices[0];

        for (int i = 0; i < prices.length -1; i++) {
            if (priceStock > prices[i]) {
                priceStock = prices[i];
            }

            if((priceStock <= prices[i]) && (prices[i] < prices[i + 1])) {
                result += prices[i + 1] - priceStock;
                priceStock = prices[i + 1];
            }

        }

        return result;
    }
}
